[
  {
    "title": "Writing with ADHD ",
    "url": "/blog/writing-with-adhd ",
    "body": "A personal reflection on how ADHD affects my writing process, inspired by Geraint Evans' article on ADHD writing styles. This post is a reflection on Geraint Evans' \"[This is how an ADHD person actually writes.](https://www.geraint.works/post/adhd-writing-styles)\" I'd start there first!  I'm a terrible writer.  Or, at least, I've convinced myself of that my whole life. The things that I write flow awkwardly, and I never understand all the rules of writing and the way to make things sound immersive and natural. My writing ends up awkwardly verbose and tends to wander a lot. I tend to mix tenses constantly.  I never understood why I write the way I do, until I discovered at the beginning of the year that I have rather severe inattentive ADHD.  ---  Coming across this tweet was pretty mind blowing for me. It was like someone speaking to the way I write for the first time in my life. Then seeing tons of replies under it validating the way ADHD people write I realized I wasn't alone in this. Honestly, you should probably just go read Geraint's article \"This is how an ADHD person actually writes.\" instead of reading this, but I'll do my best to share my thoughts on top of it.  In his article Geraint calls out four main points in his concussion, so I'll use that as a starting point. (And sorry if this structure doesn't make sense... You know. ADHD ¯\\(ツ)/¯)  Here are the four points:  Impulsivity – \"Impulsivity & rushing through tasks - I need to say this now!\" Attention to detail - \"Yeah, probably fine, ill just post it.\" Being socially inappropriate – \"Sorry, why do I have to change how I communicate when you clearly understand what I mean?\" Feeling Misunderstood.  We'll dive into each separately.  Impulsivity  Gotta go fast. Having my special flavor of ADHD means a mind constantly full of ideas at all times. You know that expression \"drinking from the fire hose\"? It's like that, but 8+ hours of the day, every day (before completely running out of energy and crashing, but that is a topic for another time.)  A lot of ideas  Even trying to sit down and write this out, it's hard to move to the next because there are 18 different ways I could continue this sentence, and 14 of them probably involve a complete topic change.  Each idea feels like it is so incredibly pressing, and the entire world should hear about this – only to be frustrated after tweeting it out to the world, bugging a coworker or talking to my partner, and finding no interest at all in it.  Writing with ADHD means TONS of edit passes on even a few paragraphs because often I've shoved so many ideas into a small space that it feels overwhelming and disjointed to read. It ends up being hard to follow because I've left out a bunch of the in-between framing context that is in my head that I forget others can't follow.  Overly passionate  Often having this volume of ideas, and an immense, fast burning passion for a topic means things are often oversold, or phrased incorrectly.  I remember once writing an email to a director at my then-work flagging that a product decision was \"unethical\" because I believed strongly we were making the wrong decision. In reality, while it was a bad decision, unethical was both the incorrect framing AND severity. Would both craft and inclusivity suffer from this decision?  Yes. However, was this a decision that was any more or less severe from the thousands made at the company every day? No, not really. In the moment though, it seemed like the most important thing in the universe, and my passion was dialed to 11.  Luckily, this person was highly empathetic, and explained to the email chain what I likely meant (and why I was over-reacting) without condescending. It was really eye opening to me, and I always remember that. (Aside: Stick with the people who will call out out in a loving way! These people will help you grow immensely.)  Because I feel like I've explained absolutely nothing here, that seems like a great time to move on to point two!  Attention to detail  This one's short description nails it on the head: \"Yeah, probably fine, ill just post it.\"  This pretty much captures my whole sentiment here, and really conflicts with the last point, Feeling Misunderstood, yet some how coexist.  How this often manifests is either 1) writing for hours, attempting to get things right or concise or understandable and eventually getting frustrated and hitting post, or 2) blasting some writing out in 30 seconds and pressing send without even reading it back.  I was never able to write papers in school because if I tried to edit a long piece of writing, rather than editing it I would just end up rewriting the whole thing on each edit pass. In the end I defaulted to writing a few hours before the deadline so I wouldn't have time to fret over the contents or writing style. I call this \"Deadline Adrenaline.\" I found I got better grades and responses often with just throwing something out there on the first pass than trying to write in a way others would understand easily (because, of course I couldn't do that. My brain doesn't work that way.)  Deadline Adrenaline  An aside – deadline adrenaline is something that I've come to lean on as an ADHD person throughout all parts of my life. I'm not sure if this is strictly and ADHD thing, or a me thing.  Deadline adrenaline is roughly leaving something so late to the last minute that I'm basically fucked if I don't finish it in X hours. School papers, project deadlines, even packing a house or submitting some documents, many of these things in my life get done this way.  Often tasks that seem impossible I'm able to pull off with ease leaning on this, but it means it can be difficult to worth with others effectively. My managers are always terrified and then shocked when in a day I turn around an entire project, or complete what seems like an impossible amount of work in a short time.  This process I go through is part of the ADHD cycles I experience, which I'd love to write about more later.  The super TL;DR is when not on medication I experience pretty severe cycles on both roughly a daily and monthly basis. These cover energy, creative output, focus and more.  It makes it extremely difficult to work with others if a creative or energy high doesn't align with where others are at the time, but also when my cycle highs align with a project or collaboration people are often amazed at both the volume and quality of my output (and then probably confused why a week later I can't seem to create two screens.)  Err, we went on a bit of a tangent here though, so lets get to point 3!  Being socially inappropriate  This one is pretty straight forward for me. Let me say this first, I recognize I'm VERY, SUPER privileged to be able to work this way.  I don't work with people, companies, etc that require me to do anything in a certain way. Need to dress a certain way? That is a nope. Talk or write formally? That is a nope. Maybe seems messed up, but it's how my brain works ¯\\(ツ)/¯  I am fortunate that I've been able to find a career path that I've been able to design a way to create that works for me, and brings people value, but I think many ADHD people's potential is never even given a chance to shine because they can't engage with the world the way the world wants them to.  I was blessed with some incredible teachers and mentors that saw the value in me despite my \"weirdness\" that I was never able to define until recently.  I think we leave a lot of great people behind because they can't or don't work the way the world wants them to. I'd be still in my parents basement if my only options were suit & tie or on my feet at 8am in retail. (Y'all are the unsung heroes, doing some of the hardest work with completely unjust levels of compensation. Thank you, and I hope we can improve the way you all have to work in my lifetime.)  To wrap up this section: I've always done the worst when I tried to fit myself into the mould of the \"Normal.\" I end up coming off just as a slightly ok-ish designer. I've found resounding success in the past few years when I've leaned into the me unapologetically, even though I recognize it can be hard to work with and around.  I have the utmost respect for managers and leaders that can utilize the odd-shaped puzzle pieces like myself and figure out where they fit.  Feeling Misunderstood  Moving on to the biggest one – Feeling misunderstood. This is the root of almost all social issues that ADHD brings for me personally.  Feel like someone didn't understand what you said – here comes 10 minutes of exposition to try to explain that one statement I said, meanwhile the whole group is slowly edging away to get away from this odd guy.  Post a piece of writing online? \"People will pick apart every statement.\", \"Don't post that, people won't understand what you mean.\" The amount of self-censorship you do from fear of being misunderstood is both socially crippling, and highly career negative.  When I worked at Facebook, one thing I always struggled with is there is this idea of as you become a more senior designer you build more of a public following, and begin to have an impact on our industry. This was always crippling for me to even think about, because of the fear of doing or saying something wrong and then being outcast.  The feeling of being misunderstood to and ADHD person is TERRIFYING. I still have a thousand minor slights or social awkwardness I've committed that I think about weekly, and am just begging in my head to be able to go back and explain or correct.  Wrapping Up  Even as I start this wrap up, I basically feel like I just wrote a bunch of stuff that people won't really get anything out of because of it being highly disjointed.  But I'll throw it out there since I'm trying to get better at challenging my assumptions and learning more about myself and my ADHD through sharing with others and getting feedback.  This meandered a bit from just focusing on writing, but writing is HARD for ADHD people. I'm trying to do it more to get better, and identify how the above things affect me and my writing and how I can improve it.  I one-shot this writing, so apologies for any issues, spelling, flow or otherwise. I'm always open to talk about design, ADHD and more. You can reach me at iamnbutler@gmail.com.  Hope this is interesting or useful to someone!  Nate 🌱 "
  },
  {
    "title": "fig-gen: Making Generative art in Figma. ",
    "url": "/blog/fig-gen-generative-art-figma ",
    "body": "Exploring the new Automator plugin for Figma. I thought exploring a minimal generative series using pixels and mapping equations would be a fun way to try it out. Generative Art with Figma & Automator  I spent the evening exploring the new Automator plugin for Figma from Jordan Singer. I thought a minimal generative series using pixels and mapping equations would be a fun way to try it out.  [image]  Process  I started by pushing on nesting shapes – How does it look when you nest and rotate shapes continuously? I got some cool outcomes like below, but I realized that most of the gens would end up looking pretty similar, relying so heavily on rotation.  [image]  Exploring a different direction, I remembered playing with graphing calculators back in high school – Using trig functions like sin, cos, and tan, I got some exciting results right off the bat.  Once I found a few directions I liked, I realized that these gens would probably show best in some sort of frame, especially if I wanted to show a few together. I went with the simplest outline possible to keep everything monochrome and on theme.  In the end, I didn't use any nesting to create each gen. Frames 1px tall and 1~6px wide (randomized) are charted in 2D along the x-axis using the repeat's {{index}}.  The generative functions are mostly created using sin, cos, tan, a randomizer variable, and {{index}} combined in different ways.  My favorite thing so far about Automator is how quickly I was able to explore a ton of variations. I was able to create over 60 gens with some really wide variation in under 2 hours.  [image]  Here are some of my favorite gens:  [image] [image] [image] [image] [image] [image]  I'm looking forward to exploring another generative series soon, following everything I learned with this one!  You can find some of the JSON import files I saved as I was exploring in the fig-gen repo.  ---  Jordan Singer's Automator plugin is currently in closed beta. I can't wait to see what everyone is able to create once they get their hands on this! "
  },
  {
    "title": "The Black Magic of Canvas and Text Editing ",
    "url": "/blog/magic-of-canvas-and-text ",
    "body": "Or: Writings on how complex canvas editors and text systems work. As I dive into building my own canvas editor I'm starting to wonder about the folks and tech that has come before. Here is a collection of things I've found so far (with hopefully more to come!)  Canvas  Figma - Evan Wallace  A collection of writings on technical work on Figma.  Figma - Rasmus Andersson  An overall overview of the Figma by Rasmus, including design, engineering, and culture.  Inside Sketch: A deep dive into our Canvas tech - Pieter Omvlee  Figma 1 & Figma 2 - Andrew Chan  Scene Graph  Wikipedia: Scene Graph  Some advantages of the scene graph:  single parent, multiple children propagate operations downwards to children culling of non-visible elements streamlined hit testing and selection  Text  Text Rendering Hates You - faultlore  A bible on text rendering.  ---  Thannks to all the folks in this thread for contributing links! "
  },
  {
    "title": "Design Docs V2 ",
    "url": "/blog/design-docs-v2 ",
    "body": "Design Docs V2.0 brings a new site built in Next.js, refined content, and a dedicated domain at designdocs.co. It aims to give early career designers resources and a roadmap to improve their craft, prepare a portfolio, and get their first job in the industry. Design Docs V2.0 brings a new site built in Next.js, refined content, and a dedicated domain at designdocs.co.  [image]  I've been working on updating resources to make it easy for people to contribute to the project and plan over the following few versions to have clear tasks for people to pick up.  Design Docs aims to give early career designers resources and a roadmap to improve their craft, prepare a portfolio, and get their first job in the industry (or land a job they are chasing.)  I hope to showcase various works from a diverse set of designers and bring in people from many backgrounds to give feedback and contribute over time.  If you are interested in contributing, email me at iamnbutler at gmail, or just send a pull request or open an issue/discussion. Everything is open for contributions.  There is a small guide on contributions in CONTRIBUTING.md and a tenitive TODO list in the project README  I look forward to the future of Design Docs as a resource for students and designers all over.  What's Changed  Fix \"copyright\" typo by @maxdeviant in https://github.com/iamnbutler/design-docs/pull/1 Next by @iamnbutler in https://github.com/iamnbutler/design-docs/pull/3 Bring content up to date with V1, further style prose by @iamnbutler in https://github.com/iamnbutler/design-docs/pull/4 Update layout, content by @iamnbutler in https://github.com/iamnbutler/design-docs/pull/5  New Contributors  @maxdeviant made their first contribution in https://github.com/iamnbutler/design-docs/pull/1  Full Changelog: https://github.com/iamnbutler/design-docs/compare/v1.0...v2.0.0 "
  },
  {
    "title": "Building UI in gpui ",
    "url": "/blog/gpui-building-ui ",
    "body": "An overview of how to build in gpui, and the tricks I've learned over the last 2 years. A reasonably unstructured collection of tips and tricks for building UI in gpui.  This post will give a bit more flavor as we go to the examples in the gpui-examples repo.  Application & Context  Remove the default titlebar  Example – Hide titlebar  This one is pretty straight forward. but immediately useful.  If you are building a reasonably custom looking UI, hiding the titlebar is one of the first things you will be looking to do.  Since this one is so short, I'll just share the whole main fn:  ~~~rs fn main() {     let window_options = WindowOptions {         titlebar: None,         ..Default::default()     };      Application::new().run(|cx: &mut App| {         cx.openwindow(windowoptions, |_, cx| {             // your app         })         .unwrap();          cx.activate(true);     }); } ~~~  Basically, just pass None to titlebar in WindowOptions. This will give you an app with no titlebar at all.  Extending cx  Example – Context Extension  Add globally accessible data and methods with a central way to access them by extending App.  I have a full post on this one, but here is a quick example:  ~~~rs // Define a basic theme struct #[derive(Clone, Debug)] pub struct Theme {     fg: Hsla,     bg: Hsla,     accent: Hsla, }  impl Default for Theme {     fn default() -> Self {         Theme {             fg: hsla(220.0 / 360.0, 9.0 / 100.0, 72.0 / 100.0, 1.0),             bg: hsla(220.0 / 360.0, 14.0 / 100.0, 18.0 / 100.0, 1.0),             accent: hsla(207.0 / 360.0, 82.0 / 100.0, 66.0 / 100.0, 1.0),         }     } }  // Make it accessible globally #[derive(Clone, Debug)] pub struct GlobalTheme(pub Arc<Theme>);  impl Deref for GlobalTheme {     type Target = Arc<Theme>;     fn deref(&self) -> &Self::Target { &self.0 } }  impl Global for GlobalTheme {}  // Define the extension trait pub trait ActiveTheme {     fn theme(&self) -> &Arc<Theme>; }  // Implement the extension for App impl ActiveTheme for App {     fn theme(&self) -> &Arc<Theme> {         &self.global::<GlobalTheme>().0     } }  // Set your global theme fn main() {     Application::new().run(|cx: &mut App| {         // Initialize the global theme         cx.set_global(GlobalTheme(Arc::new(Theme::default())));          cx.openwindow(windowoptions, |_window, cx| {             // Now you can access the theme anywhere             cx.new_view(|cx| MyView::new(cx))         }).unwrap();     }); }  // Then use your context extension anywhere impl Render for MyView {     fn render(&mut self, _: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {         div()             .text_color(cx.theme().fg)             .bg(cx.theme().bg)             // ... other properties     } } ~~~  UI Components  Conditional Rendering  When building UI, one of the most common tasks is conditional rendering.  You can do this with if/match obviously:  ~~~rs #[derive(RenderOnce)] pub struct Checkbox {     pub checked: bool, }  impl RenderOnce for Checkbox {     fn render(self, _: &mut Window, cx: &mut App) -> impl IntoElement {         div()             .child(                 if self.checked {                     // might return some svg                     Icon::check().intoanyelement()                 } else {                     // else return an empty element                     div().intoanyelement()                 }             )     } } ~~~  but there are a number of other useful conditional rendering patterns as well:  .when .when_some .when_none .children combined with methods returning an Option<AnyElement>  more coming soon "
  },
  {
    "title": "Design Workshop ",
    "url": "/blog/design-workshop-2015 ",
    "body": "A two part project: one part illustration, one part narrative. It was born out of a desire to make without a problem, to make for the sake of making. This is a project about discovery, identifying weakness, and finding strength. A two part project: one part illustration, one part narrative. It was born out of a desire to make without a problem, to make for the sake of making.  Learning to Make  The illustrations began by exploring the ideas of lost worlds and alternate realities but as the project continued it began to gradually in change form.  [image]  The idea of making without a goal or problem in mind was both terrifying and liberating. Designers are used to the idea of making from a brief or a set of instructions, or finding a solution to a problem. Here I sought to explore the scope of possibilities outside the prototypical design process. The project is a rejection all that is design: creating using a problem and solution formula. It is a dive into the concept of design as making, creating to discover about the world and one's self.  Perhaps saying that the project doesn't deal with a problem is misleading. It would be more correct to say that the problem is the process in which making powers discoveries through research. It is easy to become complacent when designing from project briefs, and it is easy to lose some of the imagination and pure creation that one starts out with in design when following this process. Exploring showed how to research and design bymaking--creating work that by itself was not solving a problem, but when put together in series showed development and expansion of of voice.  Visual Research  Sketching came first in the form of simple geometric illustrations. There was an idea of geometric shapes and forms right from the beginning. The direction pursued was one of exploring an unknown world, of teleportation and telepresence.  [image]  This idea manifested itself in the work through form, layering and artistic direction. Rather than focus on designing to these ideas, they simply existed as a springboard into a deep process of making.  Creating a Process  I began exploring various 3D softwares. I stumbled upon a delightful voxel design program called MagicaVoxel (a voxel is the 3D equivalent of a 2D pixel.) It was a simple, very lightweight program that allowed quick prototyping of ideas, with rather straightforward rendering tools.  [image]  The process of designing work was a form of visual research for me. By first creating, then observing work out in the world and then reflecting and creating again I could see a shift in the voice of the work I created. This was a strange but exciting feeling to me as I had not worked in this fashion intensely before, discovering new ideas by creating rather than doing formal research.  [image]  I quickly desired more depth in my 3D software so I explored Blender and Maya. I spent a large amount of time working on learning the new workflows of these platforms, but noticed that the quality of the work I produced week to week was less. I was spending less time on finding exciting compositions and interactions and more on developing new techniques and learning how to do more complex rendering. While this in itself is not a bad thing, because of the short nature of the project I decided to go back to the simpler software I worked with to continue to develop my ideas.  [image]  To summate the results of my making and research so far I created a series of five posters. The posters address the topics of intention, message, complexity and fluidity. They include narrative that discuss results and act as visual process, exposing a landmark in my research.  One of the themes that came up during this process of summation and evaluation of work completed was the cyclical nature of the making process. Exploration and research lead to making, which lead to new inspiration, which in turn lead to more exploration and research to find how to make the next desired piece, and so forth. While this is true of many processes it seemed to occur very rapidly while making in this manner.  Taking a Step Back  Beginning from the second half of the project, while making continued as in the first half, I began to explore writing as another way to challenge weakness. Writing is an important aspect of design that is often overlooked and one that I personally struggle with. By diving into writing different aspects of making could be addressed. Language, personal versus impersonal writing, pacing and sentence structure are similar to the tools used in production design, akin to the pen tool, the type tool, rulers, guides and shapes. By seeing writing beyond just words it reveals itself as another form ofcreating--one which can be explored, manipulated, molded and crafted.  I decided to make a mini-site with a collection of four stories reflecting on things I had learned during my time in and out of school over the past four years. By drawing from my own experience I'm able to write about topics that I care about, but attempt to universalize them so that they are applicable to many other designers that may read the stories. The stories included:  1 -- The Impostor Inside  Identifying impostor syndrome and understanding your value  2 -- Break the Cycle  Living with depression and dealing with it's effects on your creative process  3 -- Make! Make! Make!  Why finding a balance between collecting knowledge and making is important  4 -- Kill Your Idols  There is no such thing as a design superstar, just those with more experience, and those that put the work in  [image]  Making By Reflecting  The writing began as a mostly self-reflective process, but I learned through the process that simply reading someone else's reflections does not drive a desire for change, or help the reader to feel the impact of the writing.  As I wrote and rewrote my stories I attempted to lead into less personal rhetoric as the story progressed to help universalize the problem being discussed. The goal was not to tell others how I dealt with impostor syndrome or worked through my depression, but rather to inspire others who may be dealing with or know others dealing with the same situations, and maybe learn some steps to take to help climb out of these situations. "
  },
  {
    "title": "Building a new site with Astro ",
    "url": "/blog/new_astro_site ",
    "body": "It's that time of year again – time to build a new site. This time, I'm using Astro. Here's how it's going. I'm out on paternity leave until early April, and with things finally calming down a little bit with the little one I thought I'd take a little time to build a new site.  For now this is a bit of a back-to-basics approach. I'm trying out Astro, and it feels oddly nostalgic for some reason – like I'm building a site in the early 2000s. It's a bit of a throwback, but in a good way.  I'm keeping things really simple for now. A single stylesheet, markdown for content, and a few components.  So far Astro's Content Collections have made getting content into the site really easy. It is nice that it uses Zod right out of the box for validation as if I'm working with TypeScript it feels wrong to have untyped data like markdown frontmatter usually is.  Honestly, it's been a bit of a struggle not using Tailwind for the first time in quite a while–but it's been interesting getting back into the swing of writing CSS again.  Rather than where I usually get held up when building a new site (trying to backport content, update posts I never finished, try to get things perfect...) I'm just going to start with a clean slate, minimal content, ship quickly and see where things go from there.  Wish me luck!  Nate out 🫡 "
  },
  {
    "title": "Generating a Content Index ",
    "url": "/blog/generating-content-index ",
    "body": "Ahead of some schemes of building site-wide content search, and perhaps an RSS feed, let's build a content index. I've been eyeing TinySearch for a long while, and now is a great chance while things are super simple to try to get it working.  Matthias Endler has a great post on experimenting with building a really tiny site-wide search utalizing Rust & WASM, and ever since I read it I've been wanting to try it out.  What we'll need up front is a content index–a JSON file that contains all of the content on the site that we want to index for search. This will include things like the title, description, and URL of each page. We'll want to include the body as well, but there is probably some magic we can do to reduce the amount of text we bring in from the body to keep things as small as possible.  We need an output that looks something like this, so let's get to work on that.  Creating the Index  After playing with some ts-node nonsense, I realized that python is probably the easiest tool for the job here.  This little script will walk through the src/content directory and generate a JSON file that contains all of the metadata for each markdown document.  `python import json import os import re from typing import Dict  def createslugfrom_filename(filename: str) -> str:     return re.sub(r'^\\d+[-_]', '', filename).rsplit('.', 1)[0]  def extract_metadata(content: str) -> Dict[str, str]:     metadata = {}     match = re.search(r'^---\\s+(.*?)\\s+---', content, re.DOTALL)     if match:         front_matter = match.group(1)         for line in front_matter.splitlines():             key, value = line.split(': ', 1)             metadata[key.strip()] = value.strip().strip('\"').strip(\"'\")     return metadata  def createcontentindex(src_folder: str) -> None:     index = {}     for root, dirs, files in os.walk(src_folder):         folder = os.path.basename(root)         if folder == 'content':             continue         index[folder] = {}         for file in files:             if file.endswith('.md'):                 filepath = os.path.join(root, file)                 with open(filepath, 'r', encoding='utf-8') as f:                     content = f.read()                     metadata = extract_metadata(content)                     slug = createslugfrom_filename(file)                     index[folder][slug] = {                         'slug': slug,                         'datepublished': metadata.get('datepublished', 'No Date Published'),                         'title': metadata.get('title', 'No Title'),                         'preview': metadata.get('preview', 'No Preview')                     }      with open('index/content.json', 'w', encoding='utf-8') as f:         json.dump(index, f, indent=4)  createcontentindex('src/content') `  Running it outputs some json that looks like this:  `json {   \"fragment\": {     \"00\": {       \"slug\": \"00\",       \"date_published\": \"2024-02-27\",       \"title\": \"Building a new site with Astro\",       \"preview\": \"It's that time of year again \\u2013 time to build a new site. This time, I'm using Astro. Here's how it's going.\"     },     \"01\": {       \"slug\": \"01\",       \"date_published\": \"2024-02-27\",       \"title\": \"Generating a content index\",       \"preview\": \"Ahead of some schemes of building site-wide content search, and perhaps an RSS feed, let's build a content index.\"     }   } } `  This looks pretty good for our needs. I'm not sure yet if we need to match the exact structure of the TinySearch index – we'll look into that next. But now we have a handy JSON index of all of our content that we can use for whatever we need. "
  },
  {
    "title": "Adding Extended Context in GPUI ",
    "url": "/blog/gpui-adding-extended-context ",
    "body": "Make global items accessible from anywhere in your app through cx. Inevitably when building an app you have various state and data that you want accessible from anywhere in an app.  When using gpui, thanks to Rust's powerful trait system, you can use an extension to do this–and it is pretty handy.  Let's take a look.  How it works  Here's the basic idea:  1. Define a trait with the methods you want to add to App 2. Implement that trait for the App type 3. Use your methods wherever you have a reference to App  Minimally:  `rust pub trait MyAppExt {     fn say_hello(&self) -> String; }  impl MyAppExt for App {     fn say_hello(&self) -> String {         \"Hello from my App extension!\".to_string()     } } `  With this trait defined, you can use it wherever you have an App reference:  `rust impl SomeStruct {     fn greet(&self, cx: &App) {         let greeting = cx.say_hello();         println!(\"{}\", greeting);     } } `  Example: Adding Convenient, Global Theme Access  Let's walk adding an example where you can access the theme anywhere from where you have an App reference.  Let's start by defining a basic theme:  `rust use gpui::Hsla;  #[derive(Clone, Debug)] pub struct Theme {     fg: Hsla,     bg: Hsla,     accent: Hsla, }  impl Default for Theme {     fn default() -> Self {         Theme {             fg: hsla(220.0 / 360.0, 9.0 / 100.0, 72.0 / 100.0, 1.0),             bg: hsla(220.0 / 360.0, 14.0 / 100.0, 18.0 / 100.0, 1.0),             accent: hsla(207.0 / 360.0, 82.0 / 100.0, 66.0 / 100.0, 1.0),         }     } } `  Now we need to make it accessible globally:  To make something accessible globally in gpui we need to create a global wrapper:  `rust use std::ops::{Deref, DerefMut}; use std::sync::Arc; use gpui::Global;  #[derive(Clone, Debug)] pub struct GlobalTheme(pub Arc<Theme>);  impl Deref for GlobalTheme {     type Target = Arc<Theme>;      fn deref(&self) -> &Self::Target {         &self.0     } }  impl DerefMut for GlobalTheme {     fn deref_mut(&mut self) -> &mut Self::Target {         &mut self.0     } }  impl Global for GlobalTheme {} `  This wrapper lets us store our theme in App's global state and access it easily with dereferencing.  Then we can define a trait that we will use to extend App:  `rust pub trait ActiveTheme {     fn theme(&self) -> &Arc<Theme>; } `  This is a simple one, but you could define anything here... A whole theme registry, logic for swapping themes, etc.  Then we implement our extension on App:  `rust impl ActiveTheme for App {     fn theme(&self) -> &Arc<Theme> {         &self.global::<GlobalTheme>().0     } } `  Now we can use our extension in our UI:  `rust pub struct AppExtensionExample {}  impl Render for AppExtensionExample {     fn render(&mut self, _window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {         div()             .size_full()             .items_center()             .justify_center()             .text_xs()             .text_color(cx.theme().fg)             .bg(cx.theme().bg)             .child(\"Here are our theme colors!\")             .children(vec![                 div().w6().roundedfull().bg(cx.theme().fg),                 div().w6().roundedfull().bg(cx.theme().bg),                 div().w6().roundedfull().bg(cx.theme().accent),             ])     } } `  Here is everything together (or grab the example)  `rust //! # GPUI App extension example //! //! Add gpui to your Cargo.toml: //!     gpui = { git = \"https://github.com/zed-industries/zed\", rev = \"c04c5812b6295ab683fbf1900499330cbc2b3058\"}  use gpui:{     bounds, div, hsla, point, px, size, App, AppContext as _, Application, Context, FocusHandle,     Global, Hsla, IntoElement, Menu, ParentElement as , Render, Styled as , TitlebarOptions,     Window, WindowBounds, WindowOptions, }; use std::ops::{Deref, DerefMut}; use std::sync::Arc;  #[derive(Clone, Debug)] pub struct Theme {     fg: Hsla,     bg: Hsla,     accent: Hsla, }  impl Default for Theme {     fn default() -> Self {         Theme {             fg: hsla(220.0 / 360.0, 9.0 / 100.0, 72.0 / 100.0, 1.0),             bg: hsla(220.0 / 360.0, 14.0 / 100.0, 18.0 / 100.0, 1.0),             accent: hsla(207.0 / 360.0, 82.0 / 100.0, 66.0 / 100.0, 1.0),         }     } }  impl Theme {     pub fn get_global(cx: &App) -> &Arc<Theme> {         &cx.global::<GlobalTheme>().0     } }  #[derive(Clone, Debug)] pub struct GlobalTheme(pub Arc<Theme>);  impl Deref for GlobalTheme {     type Target = Arc<Theme>;      fn deref(&self) -> &Self::Target {         &self.0     } }  impl DerefMut for GlobalTheme {     fn deref_mut(&mut self) -> &mut Self::Target {         &mut self.0     } }  impl Global for GlobalTheme {}  pub trait ActiveTheme {     fn theme(&self) -> &Arc<Theme>; }  impl ActiveTheme for App {     fn theme(&self) -> &Arc<Theme> {         &self.global::<GlobalTheme>().0     } }  pub struct AppExtensionExample {     focus_handle: FocusHandle, }  impl Render for AppExtensionExample {     fn render(&mut self, _window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {         let theme_colors = div().flex().gap(px(12.)).children(vec![             div()                 .size_6()                 .rounded_full()                 .bg(cx.theme().fg)                 .border_1()                 .border_color(gpui::white().alpha(0.12)),             div()                 .size_6()                 .rounded_full()                 .bg(cx.theme().bg)                 .border_1()                 .border_color(gpui::white().alpha(0.12)),             div()                 .size_6()                 .rounded_full()                 .bg(cx.theme().accent)                 .border_1()                 .border_color(gpui::white().alpha(0.12)),         ]);          div()             .flex()             .flex_col()             .flex_initial()             .p_4()             .w(px(200.0))             .h(px(160.0))             .justify_center()             .items_center()             .text_center()             .text_xs()             .text_color(cx.theme().fg)             .bg(cx.theme().bg)             .gap(px(6.))             .child(\"Our theme colors!\")             .child(theme_colors)     } }  fn main() {     Application::new().run(|cx: &mut App| {         cx.set_menus(vec![Menu {             name: \"App Extensions\".into(),             items: vec![],         }]);          cx.set_global(GlobalTheme(Arc::new(Theme::default())));          let window = cx             .open_window(                 WindowOptions {                     titlebar: Some(TitlebarOptions {                         title: Some(\"App Extensions\".into()),                         ..Default::default()                     }),                     window_bounds: Some(WindowBounds::Windowed(bounds(                         point(px(0.0), px(0.0)),                         size(px(200.), px(160.)),                     ))),                     ..Default::default()                 },                 |_window, cx| {                     cx.new(|cx| AppExtensionExample {                         focushandle: cx.focushandle(),                     })                 },             )             .unwrap();          window             .update(cx, |view, window, cx| {                 window.focus(&view.focus_handle);                 cx.activate(true);             })             .unwrap();     }) } `  Enjoy! I know gpui is still missing tons of examples. Let me know over on bluesky if there is anything specific you want to see. "
  },
  {
    "title": "Adding a Favicon in 2024 ",
    "url": "/blog/adding-favicon-in-2024 ",
    "body": "What do we actually need to do to add a favicon to a site in 2024? With a little Astro flavor. Let's go on a quick side quest to add a favicon to this new site. These always seem to be a bit of a pain because the vendor requirements are always changing. Evil Martians have a really great writeup that covers a lot of this here: [How to Favicon in 2024: Six files that fit most needs ](https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs).  We'll mostly follow that, with a few Astro-isms tossed in.  To start, we'll need to create an asset for our favicon. I'd actually recommend calling this something other than favicon to prevent the browser from loading it in a way you don't expect, due to it looking for things named favicon.  In the end, these are the assets I ended up with:  ` public/   apple-touch-icon.png    // 180x180 for iOS   favicon.ico             // 32x32 for any non-svg supporting browsers                           // You may want a custom 16x16 icon if your                           // favicon won't look good scaled down automatically   icon.svg                // More on this below   icon-dev.svg            // Alternate icon to indicate development environments   icon_192.png            // 192x192 for Android   icon_512.png            // 512x512 for Android   manifest.webmanifest    // Web App Manifest `  The SVG Favicon  icon.svg does double duty as both the light and dark mode icon.  `html <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"none\">   <style>     @media (prefers-color-scheme: dark) {       .a {         fill: #fff;       }     }   </style>   <path     fill=\"#000\"     fill-rule=\"evenodd\"     d=\"M20 4h-4v8h-4V4H8v12H4v4h4v4H4v4h24v-4H12v-8h16V4h-4v8h-4z\"     class=\"a\"     clip-rule=\"evenodd\"   /> </svg> `  We use a media query to change the fill color of the icon based on the user's preferred color scheme. This means that even if a user's browser uses a dark color tab bar, the favicon will still look good.  This approach feels a bit more elegant than swapping out the icon with JavaScript, or having multiple icons in the markup.  The Dev-Mode Favicon  A cool little trick I picked up from the Evil Martians article is to use a different icon in development environments. The approach they used was a little different, involving a custom webpack plugin, but we can do something far easier in Astro.  Here is my current head.astro file:  `astro <!-- src/components/head.astro --> --- interface HeadProps {     title: string; }  const is_dev = import.meta.env.DEV; const { title } = Astro.props as HeadProps; ---  <head>     <meta charset=\"utf-8\" />      <link rel=\"manifest\" href=\"/manifest.webmanifest\" />     <link rel=\"icon\" href=\"/favicon.ico\" sizes=\"32x32\" />     <!-- Show a different favicon if in development env -->     <link rel=\"icon\" href={/icon${is_dev && \"-dev\"}.svg} type=\"image/svg+xml\" />     <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />     <meta name=\"generator\" content={Astro.generator} />      <title>{title}</title> </head> `  Astro exposes these handy base environment variables that we can use to conditionally load different assets based on the environment.  Using them we can conditionally load the icon-dev.svg in development environments, and the regular icon.svg in production to make it super clear from the tab bar which environment we're in.  I love this so much as I constantly get mixed up with a prod tab open, and spend time debugging only to realize I'm in the wrong environment... maybe just me 😅  The Web App Manifest  The web app manifest is a JSON file that tells the browser about your web application and how it should behave when 'installed' on the user's mobile device or desktop.  Mine is pretty simple:  `json {   \"name\": \"nate.rip\",   \"icons\": [     { \"src\": \"/icon-192.png\", \"type\": \"image/png\", \"sizes\": \"192x192\" },     { \"src\": \"/icon-512.png\", \"type\": \"image/png\", \"sizes\": \"512x512\" }   ] } `  This will ensure places that use it will get the higher definition icons, and the browser will know what to do when the user tries to add the site to their home screen.  And that is it!  Let me know if I missed anything...  There are a million different sizes and shapes for favicons, but I feel like this is a resonable amount of coverage for something simple like a personal site or blog. "
  },
  {
    "title": "Mixblocks ",
    "url": "/projects/mixblocks ",
    "body": "Learn, create & remix with light and sound. mixblocks lets you create small, open source blocks that anyone can use to make creations, license-free–with a focus on physical output to displays like LED Dot Matrices. [image]  The Concept  Inspired by a project a friend did recently about a display that reacts to your music, I started exploring mixblocks. A creation & remix tool focused around collaborative creation through the sharing of 'blocks.'  While Mixblocks has a feed of creations that you can grab and remix from, it has no likes, no connected identities, and no custom user names.  [image]  [image] (Some branding exploration fun)  Joining Mixblocks  When joining mixblocks, a creator is assigned a randomly generated name & profile image, which they can regenerate any amount of times. This generated name becomes the pseudonym that they create under. Mixblocks focuses on creation from the beginning–not social presence or clout.  New Person Flow  The new person flow for mixblocks focuses on getting you in and creating as soon as possible. You can only create an account with your phone number or a secure auth. Mixblocks wants to know as little about you as possible.  Your First Block  Dropping into the app for the first time, you will walk through creating your first block. This can be a lightblock or a soundblock, but you have to create something to enter the rest of the app.  You can walk through your first block guided (think the first level of Sound Shapes) or choose to jump straight into creation.  Remixing & Sharing  More coming soon!  Importing & Exporting  More coming soon!  Beyond Digital  Take your blocks and run with them – Mixblocks is built from the ground up for use with hacker and maker tools like Arduino, LED Matrixes, etc. Write your own custom integrations, or grab from one that already exists... "
  },
  {
    "title": "Design Docs ",
    "url": "/projects/design-docs ",
    "body": "An open source design doc site focused on helping early career designers [image]  An open source design doc site focused on helping early career designers and new grads on their journey into the design industry.  Go to Design Docs "
  },
  {
    "title": "iOS 11 Backgrounds – fb.design ",
    "url": "/projects/ios11-gui ",
    "body": "A set of backgrounds for the iOS 11 GUI [image]  In 2016 we released the iOS 11 GUI on facebook.design as a continuation of the GUI resources started by Teehan & Lax. I worked on the Photoshop resources, and also designed a series of abstract 3D backgrounds that were used in the GUI promo materials.  [image] [image]  We also distributed these separately as a wallpaper pack.  Download Wallpapers "
  },
  {
    "title": "Design Resources ",
    "url": "/lists/design-resources ",
    "body": "A curated collection of design resources and references. Books  Don't Make Me Think - Steve Krug - Practical guide to web usability Graphic Design: The New Basics - Ellen Lupton & Jennifer Cole Phillips - Fundamental principles of graphic design Steal like an Artist - Austin Kleon - Creativity framework for finding inspiration The Design of Everyday Things - Don Norman - Principles of intuitive design and usability Thinking with Type - Ellen Lupton - Essential guide to typography fundamentals  Readings  Designing a Comprehensive Color System - Linda Dong - Structured approach to creating cohesive color palettes Dieter Rams: 10 Principles for Good Design - Dieter Rams - Fundamental design principles from the legendary industrial designer Finding Ideas - Julie Zhou - Practical methods for creative ideation Good things don't have to take time - Adam Wathan - On efficiency in design and development Invisible Details of Interaction Design - Rauno Freiberg - Subtle aspects that improve user interactions It's Easier to Revise Than Create - Dan Mall - How starting with something imperfect leads to better results Short design books I recommend - Anthony Hobday - Curated recommendations for design reading The Dribbblisation of Design - Intercom - Critique of aesthetic-focused design at the expense of usability UI Detail Breakdowns: Switch · Shadow Borders - Derek Briggs - Analysis of subtle UI component details Visual Design Techniques - Anthony Hobday - Practical methods for improving visual designs Why I love ugly, messy interfaces — and you probably do too - Jonas Downey - Defense of function over aesthetic polish Why is dark mode so hard to get right? - Dan Hollick - Technical and design challenges of dark mode implementations  Design Systems  Accessible Color Systems - Stripe - Methodology for designing inclusive color systems Adobe Spectrum - Adobe - Comprehensive design system with detailed documentation Building a Design Systems Library with Figma Scripter - Lyft - Automating design system components Carbon Design System - IBM - Open source design system with extensive components Color in Design Systems - EightShapes - Systematic approach to color in design systems Colorbox by Lyft Design - Lyft - Interactive tool for creating accessible color palettes Defining Colors in Your Design System - UX Collective - Structured approach to color definition Design Systems - InVision - Comprehensive guide to design systems principles designsystems.com - InVision - Step-by-step resources for building design systems More Design Systems - Design Systems Database - Directory of design systems across industries Space in Design Systems - EightShapes - Systematic approaches to spacing in interfaces the components gallery - Component Gallery - Reference library of UI components across systems What are Design Tokens? - CSS-Tricks - Explanation of design tokens as building blocks  Critique  Design Critiques at Figma - Figma - Framework for effective design feedback sessions Open Design Critiques - Brian Lovin - Platform for community design feedback UI Design Critiques - Brian Lovin - In-depth analysis of popular app interfaces  Typefaces  Displaay - Type foundry specializing in contemporary typefaces Inter - Rasmus Andersson - Versatile, open-source font family for interfaces PangramPangram - Type foundry creating expressive contemporary typefaces Recursive - Arrow Type - Variable font designed for code and interface design Typeface - MacOS font manager with intuitive organization features  Icons & Assets  Font Awesome - Popular icon library with extensive collection Lucide - Open source icon library with minimal, consistent design SVG Repo - Collection of freely usable SVG vectors and icons  Example Portfolios  Andy Chung - Design leader and investor portfolio Brian Lovin - Product designer and engineer portfolio Cristian Rus - Product designer portfolio Effy Zhang - Product designer portfolio Janette Council - Digital designer portfolio Meagan Fisher Couldwell - Designer and illustrator portfolio Molly Mielke - Design-focused founder portfolio  Career & Culture  5 Tips for an Outcome Driven Design Portfolio - Design Docs - Creating portfolios that demonstrate impact Good Challenges vs Bad Challenges - Jessica Harllee - Framework for evaluating workplace challenges How to Give a Great Product Design Portfolio Presentation - Brian Lovin - Techniques for effective portfolio presentations Staff Design - Bobby Goodlatte - Stories of designers choosing IC career paths over management What do you want to be when you grow up? - Shopify - Overview of design career paths  More Resources  Book List - Write the Docs - Curated books on writing and information architecture Design Questions Library - Stanford d.school - Frameworks for design thinking Levels.fyi - Industry comparison of design salary levels The Year of the Looking Glass - Julie Zhou - Essays on design leadership and management UX Design Resources & Recommendations - Noah Levin - Comprehensive collection of UX resources  ---  Note: I maintain the content of these lists by hand but generally will use a language model to tidy them up/make things consistent, in case the descriptions seem a bit, er, mechanical. "
  },
  {
    "title": "Good Software ",
    "url": "/lists/good-software ",
    "body": "A collection of excellent apps and tools that make life better. Mac Apps  Cleanshot - The best screenshot tool for Mac Alfred - Powerful launcher and productivity tool Magnet - Window management tool Figma - Collaborative design tool Mind Node - Mind mapping app Imageoptim - Image optimization tool Codekit - Front-end development tool iA Writer - Distraction-free writing app Grammarly Editor - Writing assistant iTerm / Alacritty - Terminal emulators VS Code - Code editor Plex - Media server OneSwitch - Menu bar utility Typeface - Font manager  Creative Tools  Monodraw - Powerful ASCII art editor for creating diagrams, layouts, and flow charts in plain text Supershapes - Interactive 3D parametric shape generation tool for exploring mathematical forms "
  },
  {
    "title": "Web Dev Resources ",
    "url": "/lists/web-dev-resources ",
    "body": "A curated collection of web development tools, references, and learning materials. Preface  I'm mostly a hobby developer u2013 I've learned mostly by taping together bits of code found all over the internet for years now. This space is mostly for remembering the cool and useful shit I run across, but hopefully you can find something useful in here!  Tools  VS Code u2013 More or less the god of code editors at this point. I was resistant to moving to something so \"heavy\", only to find once I tried it it is incredibly fast on top of being packed with useful stuff. Codekit u2013 All sorts of fun things out of the box. Compass, local servers, sass compilation & more. I use VSCode more these days to cover these needs, but I relied on Codekit for years. RunJS - JavaScript playground for your desktop  Setting Up Your Editor  VS Code  Mac Setup Guide for VS Code - Comprehensive guide for setting up VS Code on Mac Bracket Pair Colorizer - Extension for making bracket pairs easier to identify  Building a Portfolio or Blog  CMS Options  Prose - The lightest you can get – Edit files directly in your repository with a web editor Kirby - File-based CMS that's developer-friendly  Portfolio & Self Promotion  How To Create An Amazing Profile ReadMe With GitHub Actions - Tutorial for creating an impressive GitHub profile  CSS  Modern CSS - Practical modern CSS solutions for today's layouts Learn CSS - Comprehensive guide by web.dev Animista - CSS animation library with customizable presets Simple SCSS Playbook - Practical SCSS techniques  Typography  TypeNugget - Typography tool for creating and testing font combinations Type Scale - Visual calculator for creating type scales  Variable Fonts  Introduction to variable fonts on the web - Getting started with variable fonts Fixing Variable Font Inheritance - Working with Variable Font properties Getting the most out of Variable Fonts on Google Fonts - Tips for optimizing variable font usage  Grid  A CSS grid tool (there are many!) These are super useful when trying to take the idea in your head and put it in a grid. This one is nice since you can create a codepen and modify it from there. Controlling leftover grid items Complex CSS Grid layout in only a few lines  Color  Solarized - Nice writeup on how color works in the Solarized color scheme Collection of color schemes - Various syntax highlighting color schemes Opacity in Hexadecimal - Guide for working with ARGB or RGBA color schemes  Visual Assets & Art  CSS Doodle u2013 Draw complex patterns & visuals in pure CSS.  Web Fonts  Recursive - Variable font for code & UI with extensive customization options  Static Site Generators  Next.js u2013 Can't beat em? Join em. Got bullied into writing React, but Next is pretty ok. Jamstack u2013 A great starting point for learning about static site generators and what is out there.  11ty  Build an eleventy site from scratch 11ty.rocks u2013 Some great eleventy tips & beginner resources. Use Airtable as a backend for an eleventy static site  Git  Questions: Remove .DS_Store from Git  Site Speed & Testing  Google Developers u2013 Pagespeed Insights  Examples & Inspiration  The Making of a Dumpster Fire - Detailed creative process behind a popular interface Shirley Wu Interview - GitHub interview with data visualization engineer "
  },
  {
    "title": "Mixblocks ",
    "url": "/shots/mixblocks ",
    "body": "[image] "
  },
  {
    "title": "Bodies ",
    "url": "/shots/bodies ",
    "body": "[image] [image]  Made in Cinema4d. This was the start of a series on the planets. I'd love to revisit these :) "
  },
  {
    "title": "gpui Fractals & More ",
    "url": "/shots/gpui-fractals ",
    "body": " A little collection of fractal and other geometric drawing explorations using gpui. The thumbnail is a composite of two images.  Some unorganized source code here: iamnbutler/gpui-fractals  [image]  This one exposed some issues with the gpui path renderer. We've been exploring some fixes!  [image]  [image] [image] [image] [image] [image] [image] [image]  [image] "
  },
  {
    "title": "Portrait Glitch ",
    "url": "/shots/portrait-glitch ",
    "body": "[image] "
  },
  {
    "title": "B&W Renders ",
    "url": "/shots/bw-render ",
    "body": "[image] [image] [image] [image] [image] [image] "
  },
  {
    "title": "Playing with Reflections ",
    "url": "/shots/playing-with-reflections ",
    "body": "[image] [image]  Exploring using colored lights and reflective surfaces. Model is an old CPU heatsync :) "
  },
  {
    "title": "News Feed XFN ",
    "url": "/shots/news-feed-xfn ",
    "body": "[image] [image] [image] [image]  Some fun branding for our news feed XFN group. The feed XFN group is a cross-functional working group that helps other teams understand and implement features that match the standards of our product. "
  },
  {
    "title": "Moonlight ",
    "url": "/shots/moonlight ",
    "body": "[image]  Been experimenting with pixel art recently. Seems to be super calming and enjoyable to work on. "
  },
  {
    "title": "Zed.dev 2.1 ",
    "url": "/shots/zed-dev-2-1 ",
    "body": "[image] [image] [image] [image]  An unused direction for the upcoming zed.dev site. Set in Pangram Pangram Foundry's Eiko and Neue Machina.  Mockup from Saroj Shahi. "
  },
  {
    "title": "Monsoon ",
    "url": "/shots/monsoon ",
    "body": "[image]  A little peek at a Risk of Rain flavored Zed theme. "
  },
  {
    "title": "Zed Industries Branding ",
    "url": "/shots/zed-industries-branding ",
    "body": "[image] [image] [image]  Some early branding work for the Zed Industries brand identity. This later would be adapted to become the Zed logo. "
  },
  {
    "title": "Infinity Ring ",
    "url": "/shots/infinity-ring ",
    "body": "[image]  Made in Cinema4d. A piece I made a while back. Looking at this always makes me want to make a physical version. "
  },
  {
    "title": "Space Glitch Patterns ",
    "url": "/shots/space-glitch-pattern ",
    "body": "[image] [image] [image] "
  },
  {
    "title": "Run Sprite ",
    "url": "/shots/run-sprite ",
    "body": "[image] "
  },
  {
    "title": "3V3.gg ",
    "url": "/shots/3v3-gg ",
    "body": "[image] "
  },
  {
    "title": "Android First Posters ",
    "url": "/shots/android-first ",
    "body": "[image] [image] [image]  An internal Facebook poster series encouraging employees to use Android devices to better empathize with and understand the experience most Facebook users experience.  Despite an overwhelming majority of Facebook users using Android devices, most product team members like designers and engineers use iOS devices. "
  },
  {
    "title": "lil' widgets ",
    "url": "/shots/lil-widgets-zed ",
    "body": "A fun little status bar widget system I explored while we were working on building semantic indexing for Zed.  These would give context on running tasks, successes, and failures, and provide an anchor point for notifications of things you might need to take action on.  [image] "
  },
  {
    "title": "Simple Google Music Notification ",
    "url": "/shots/simple-google-music-noftification ",
    "body": "[image]  I absolutely love Google's Music streaming service, but their desktop notifications are severely lacking, and the extensions that I've seen have not been much better. This is a simple concept of what a notification could look like.  Font is Segoe UI. Shuffle icon is from the Gliphish icon pack.  Also debut shot! Hello Dribbble :) Tell me what you think! "
  },
  {
    "title": "DALL·E Worlds ",
    "url": "/shots/dalle-worlds ",
    "body": "[image] [image] [image] [image] [image] [image] [image]  I've always been particularily attracted to concept art – Looking at worlds like that of Guild Wars 2, Bloodborne, or the worlds of Ghibli so much can be felt and understood from a single image. You don't have to play a game or watch a movie to get a feel for the world that exists inside these images.  When I saw people using DALL·E for the first time, I immediately thought \"I wonder what type of worlds DALL·E would imagine?\" There is a certian sense of serendipity and wonder to typing some words and getting back a world that feels full of secrets and potential adventures. I can only imagine the fun I would have had playing with a tool like DALL·E as a child.  Obvious Note: These images by DALL·E, and not me. I take no credit for them, and they are not my own work! "
  },
  {
    "title": "Cuuubic ",
    "url": "/shots/cuuubic ",
    "body": "[image] [image] [image] [image] [image] "
  },
  {
    "title": "NateV4 ",
    "url": "/shots/nate-v4 ",
    "body": "[image] "
  },
  {
    "title": "Synthesize ",
    "url": "/shots/synthesize ",
    "body": "[image] [image] [image]  An exploration of a color palette generator in the style of an analog synthesizer.  The idea was to create a fun, uncommon way to interact with color palettes, like using dials to navigate, turn knobs to introduce texture, randomness, and chaos. "
  },
  {
    "title": "Custom PS4 ",
    "url": "/shots/custom-ps4 ",
    "body": "[image] [image] [image]  A design concept I was working on for a custom PS4 rebuild. Made in Cinema4d. "
  },
  {
    "title": "Mothership ",
    "url": "/shots/mothership ",
    "body": "[image] [image] [image]  A fun branding exercise for an internal project – going all in on the space theme was a blast 🚀 "
  },
  {
    "title": "Juice for Audiobooks ",
    "url": "/shots/juice-audiobooks ",
    "body": "Designing an audiobook player for people with their own files  Earlier this year I was about a year into my Audiobook crazy, consuming a couple of books a week at least. I went down a huge Sci-fi rabbit hole!  Unfortunately, there isn't a lot of options though if you don't want to either use Libby or stick with Audible.  I started reviving JUICE as an audiobook player where people could bring their own files. The audiobook landscape is pretty scattered, and not everyone wants to be tied to Audible and Amazon. Here you could connect a google drive, dropbox, etc and build your library.  I wanted to focus to be more around series, building out a robust model for handling series with complex orders and multiple reading orders, etc.  This is how far I got:  [image]  [image]  [image]  [image] "
  }
]
